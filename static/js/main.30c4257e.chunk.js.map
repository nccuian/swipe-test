{"version":3,"sources":["InputArea.js","App.js","serviceWorker.js","index.js"],"names":["InputArea","state","url","changeHandler","e","target","files","reader","FileReader","onload","_this","setState","result","props","imgListHandler","readAsDataURL","react_default","a","createElement","onChange","this","type","multiple","accept","id","capture","className","src","alt","Component","App","imgList","swipeWidth","Object","toConsumableArray","concat","widthHandler","forEach","i","console","log","src_InputArea","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2MAiCeA,oNA9BbC,MAAQ,CACNC,IAAK,MAGPC,cAAgB,SAACC,GAGf,GAAGA,EAAEC,OAAOC,OAASF,EAAEC,OAAOC,MAAM,GAAI,CACtC,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAACL,GACfM,EAAKC,SAAS,CACZT,IAAKE,EAAEC,OAAOO,QACb,SAACV,GACFQ,EAAKG,MAAMC,eAAeJ,EAAKT,MAAMC,QAIzCK,EAAOQ,cAAcX,EAAEC,OAAOC,MAAM,8EAItC,OACEU,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,SAAUC,KAAKjB,cAAekB,KAAK,OAAOC,UAAQ,EAACC,OAAO,UAAUC,GAAG,UAAUC,QAAQ,WAChGT,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UAAUC,IAAKP,KAAKnB,MAAMC,IAAK0B,IAAI,aAzBlCC,cC8DTC,6MA1Db7B,MAAQ,CACN8B,QAAS,GACTC,WAAY,OAGdlB,eAAiB,SAACZ,GAChB,IAAI6B,EAAOE,OAAAC,EAAA,EAAAD,CAAOvB,EAAKT,MAAM8B,SAAlBI,OAAA,CAA2BjC,IACtCQ,EAAKC,SAAS,CACZoB,WACCrB,EAAK0B,iBAEVA,aAAe,WACb1B,EAAKT,MAAM8B,QAAQM,QAAQ,SAAAC,GAEzB5B,EAAKC,SAAS,CACZqB,WAAYtB,EAAKT,MAAM+B,WAFb,KAGT,WAAOO,QAAQC,IAAI9B,EAAKT,MAAM+B,yFAsBnC,OADAO,QAAQC,IAAIpB,KAAKnB,MAAM8B,SAErBf,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,OACbV,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAACuB,EAAD,CAAW3B,eAAgBM,KAAKN,iBAChCE,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,aACbV,EAAAC,EAAAC,cAAA,UACGE,KAAKnB,MAAM8B,QAAQW,IAAI,SAACxC,EAAKyC,GAC5B,OACE3B,EAAAC,EAAAC,cAAA,MAAIQ,UAAU,OAAOkB,IAAKD,GACxB3B,EAAAC,EAAAC,cAAA,OAAKQ,UAAU,UAAUC,IAAKzB,EAAK0B,IAAI,kBAhDvCC,aCOEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.30c4257e.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass InputArea extends Component {\n  state = {\n    url: ''\n  }\n\n  changeHandler = (e) => {\n    // console.log(e.target)\n    // console.log(e.target.files[0])\n    if(e.target.files && e.target.files[0]) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        this.setState({\n          url: e.target.result\n        }, (url) => {\n          this.props.imgListHandler(this.state.url)\n        })\n        // console.log(e.target)\n      }\n      reader.readAsDataURL(e.target.files[0]);\n    }\n  }\n  render() {\n    return (\n      <div>\n        <input onChange={this.changeHandler} type=\"file\" multiple accept=\"image/*\" id=\"capture\" capture=\"camera\"/>\n        <img className=\"preview\" src={this.state.url} alt=\"\"/>\n      </div>\n    )\n  }\n}\n\nexport default InputArea\n","import React, { Component } from 'react';\nimport Reactswipes from 'react-swipes';\n\nimport InputArea from './InputArea';\n\nclass App extends Component {\n  state = {\n    imgList: [],\n    swipeWidth: 250\n  }\n\n  imgListHandler = (url) => {\n    let imgList = [...this.state.imgList, url];\n    this.setState({\n      imgList\n    }, this.widthHandler)\n  }\n  widthHandler = () => {\n    this.state.imgList.forEach(i => {\n      let width = 250;\n      this.setState({\n        swipeWidth: this.state.swipeWidth + width\n      }, () => {console.log(this.state.swipeWidth)})\n    })\n  }\n\n  render() {\n    let opt = {\n      distance: 250,\n      currentPoint: 1,\n      autoPlay: false,\n      swTouchstart: e => {},\n      swTouchmove: e => {},\n      swTouchend: e => {\n        let data = {\n          moved: e.moved,\n          originalPoint: e.originalPoint,\n          newPoint: e.newPoint,\n          cancelled: e.cancelled\n        };\n        console.log(data)\n      }\n    }\n    console.log(this.state.imgList)\n    return (\n      <div className=\"App\">\n        <h1>swipes</h1>\n        <InputArea imgListHandler={this.imgListHandler} />\n        <div className=\"view-area\">\n          <ul>\n            {this.state.imgList.map((url, index) => {\n              return (\n                <li className=\"item\" key={index}>\n                  <img className=\"preview\" src={url} alt=\"\"/>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}